{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","toLocaleString","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","variant","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","tokenName","includes","latestPools","orderBy","assets","join","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance"],"mappings":"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","file":"static/js/13.1dcc4c07.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      <CardBusdValue value={earningsBusd} />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      <CardBusdValue value={busdBalance} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'Candy to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'Candy in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting CANDY')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Candy Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CANDY Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CANDY Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CANDY Block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={5} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n  const totalValue = useTotalValue()\r\n\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(762, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {/* {data ? ( */}\r\n          {/* <> */}\r\n            {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n\r\n            {/* <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Pudding Pools')}</Text> */}\r\n          {/* </> */}\r\n        {/* ) : ( */}\r\n          {/* <>\r\n            <Skeleton height={66} />\r\n          </> */}\r\n        {/* )} */}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React, { useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n\r\n    calculateAPY(activeFarms)\r\n\r\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n\r\n      farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\r\n\r\n        return apy\r\n      })\r\n    },\r\n    [bnbPrice, farmsLP],\r\n  )\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">\r\n          {getHighestAPY() ? (\r\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAssetCard = () => {\r\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.tokenName.includes('CANDY'))\r\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n  // Always include CAKE\r\n  const assets = ['CANDY', ...latestPools.map((pool) => pool.tokenName)].join(', ')\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Pools\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'SweetSwap')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'The Sweetest AMM on Binance')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          {/* <LotteryCard /> */}\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPYCard />\r\n          <EarnAssetCard />\r\n          {/* <WinCard /> */}\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"sourceRoot":""}