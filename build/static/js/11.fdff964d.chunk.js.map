{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","process","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","onClick","mr","color","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","account","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","CAKE","ETH","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","ExpandableSectionButton","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","usePriceCakeBusd","earningsBusd","multipliedBy","useWeb3React","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","bsc","info","name","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Header","gradients","bubblegum","Farms","path","pathname","useLocation","farmsLP","useFarms","usePriceBnbBusd","query","setQuery","setViewMode","ethPriceUsd","usePriceEthBusd","sortOption","setSortOption","dispatch","useDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stackedOnly","setStackedOnly","activeFarms","filter","inactiveFarms","stackedOnlyFarms","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","farmsToDisplayWithAPY","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","lowercaseQuery","isActive","farmsStaked","rowData","farms","orderBy","slice","sortFarms","size","Page","checked","marginLeft","target","length","sort","b","exact","renderContent","aria-label","role","defaultProps"],"mappings":"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","file":"static/js/11.fdff964d.chunk.js","sourcesContent":["export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APY: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          KYTHX\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'KYTHX per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('ROUGE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'KYTHX'\r\n\r\n  const farmAPY =\r\n    farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const { quoteTokenAdresses, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'KYTHX' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address, QuoteToken } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  quoteTokenAdresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  tokenAddresses: Address\r\n  cakePrice: BigNumber\r\n  originalValue: BigNumber\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  return (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\r\n  const displayBalance = earnings !== null ? earnings.toLocaleString() : '?'\r\n\r\n  return <Amount earned={earnings}>{displayBalance}</Amount>\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && 'Details'}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface TooltipProps {\r\n  content: React.ReactNode\r\n}\r\n\r\nconst TooltipContent = styled.div`\r\n  background: ${({ theme }) => theme.tooltip.background};\r\n  padding: 16px;\r\n  border-radius: 16px;\r\n  color: ${({ theme }) => theme.tooltip.text};\r\n  width: max-content;\r\n  display: none;\r\n  padding: 16px;\r\n  max-height: 500px;\r\n  z-index: ${({ theme }) => theme.zIndices.modal};\r\n  position: absolute;\r\n  bottom: calc(100% + 16px);\r\n  transform: translate(34px, 0);\r\n  right: 0;\r\n  max-width: 246px;\r\n\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\r\n    bottom: 0;\r\n    position: absolute;\r\n    transform: translate(-34px, 9px);\r\n    right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n\r\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\r\n  return (\r\n    <Container>\r\n      {children}\r\n      <TooltipContent>{content}</TooltipContent>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Tooltip\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\r\n      <Tooltip\r\n        content={\r\n          <div>\r\n            {TranslateString(999, 'The multiplier represents the amount of KYTHX rewards each farm gets.')}\r\n            <br />\r\n            <br />\r\n            {TranslateString(\r\n              999,\r\n              'For example, if a 1x farm was getting 1 KYTHX per block, a 40x farm would be getting 40 KYTHX per block.',\r\n            )}\r\n          </div>\r\n        }\r\n      >\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: number\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity\r\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\r\n  const earningsBigNumber = userData ? new BigNumber(userData.earnings) : null\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = null\r\n  let earningsBusd = 0\r\n  let displayBalance = '?'\r\n\r\n  if (earningsBigNumber) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>KYTHX </Title>\r\n        <Subtle>EARNED</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          <Staked>~{countUp}USD</Staked>\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !account}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteTokenAdresses,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\r\n            {TranslateString(999, 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { communityFarms } from 'config/constants'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const { quoteTokenAdresses, tokenAddresses, tokenSymbol, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n  const isCommunityFarm = communityFarms.includes(tokenSymbol)\r\n\r\n  return (\r\n    <Container>\r\n      <InfoContainer>\r\n        <StakeContainer>\r\n          <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n            {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n          </StyledLinkExternal>\r\n        </StakeContainer>\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} />\r\n        <StakedAction {...farm} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowProps> = (props) => {\r\n  const { details } = props\r\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelToggled(!actionPanelToggled)\r\n  }\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelToggled} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], props[key])}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label= 'KYTHX Earned'>\r\n                <Earned {...props.earned} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelToggled} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {actionPanelToggled && details && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n}\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(388, 'Finished')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useRef } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  value: string\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const inputEl = useRef(null)\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          ref={inputEl}\r\n          value={value}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToogleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToogleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { orderBy } from 'lodash'\r\n\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport Select, { OptionProps } from './components/Select/Select'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\n\r\nconst Header = styled.div`\r\n  padding: 32px 0px;\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\r\n  const ethPriceUsd = usePriceEthBusd()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stackedOnly, setStackedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\r\n\r\n  const stackedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        return orderBy(farms, 'apy', 'desc')\r\n      case 'multiplier':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.multiplier.slice(0, -1)), 'desc')\r\n      case 'earned':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n      case 'liquidity':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n      default:\r\n        return farms\r\n    }\r\n  }\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay): FarmWithStakedValue[] => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(30)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        let liquidity = farm.lpTotalInQuoteToken\r\n\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          liquidity = null\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          liquidity = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          liquidity = cakePrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n\r\n        // if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n        //   liquidity = ethPriceUsd.times(farm.lpTotalInQuoteToken)\r\n        // }\r\n\r\n        return { ...farm, apy, liquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\r\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\r\n            return true\r\n          }\r\n\r\n          return false\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPY\r\n    },\r\n    [bnbPrice, farmsLP, query, cakePrice, ethPriceUsd],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const isActive = !pathname.includes('history')\r\n  let farmsStaked = []\r\n  if (isActive) {\r\n    farmsStaked = stackedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\r\n  } else {\r\n    farmsStaked = farmsList(inactiveFarms)\r\n  }\r\n\r\n  farmsStaked = sortFarms(farmsStaked)\r\n\r\n  const rowData = farmsStaked.map((farm) => {\r\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('ROUGE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value:\r\n          farm.apy &&\r\n          farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        quoteTokenAdresses,\r\n        quoteTokenSymbol,\r\n        tokenAddresses,\r\n        cakePrice,\r\n        originalValue: farm.apy,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                bnbPrice={bnbPrice}\r\n                cakePrice={cakePrice}\r\n                ethPrice={ethPriceUsd}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                bnbPrice={bnbPrice}\r\n                cakePrice={cakePrice}\r\n                ethPrice={ethPriceUsd}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {TranslateString(999, 'Farms')}\r\n        </Heading>\r\n        <Heading size=\"lg\" color=\"text\">\r\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\r\n        </Heading>\r\n      </Header>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\r\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} value={query} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {/* <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n"],"sourceRoot":""}